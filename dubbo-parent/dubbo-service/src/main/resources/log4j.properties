## 配置根 Logger
log4j.rootLogger = INFO,console,dailyFile
log4j.additivity.org.apache=false
logdir=/app/applogs/producer



## console Appender
## "log4j.appender.console" 中的 console 为appenderName,配置根logger时
## 指定level之后, 后面的均为appenderName
log4j.appender.console=org.apache.log4j.ConsoleAppender
log4j.appender.console.Threshold=DEBUG
log4j.appender.console.Target=System.out
# 有四种Layout选项：
#a) org.apache.log4j.HTMLLayout
#b) org.apache.log4j.SimpleLayout
#c) org.apache.log4j.PatternLayout
#d) org.apache.log4j.TTCCLayout
# PatternLayout 可灵活的指定布局模式
log4j.appender.console.layout=org.apache.log4j.PatternLayout
# ConversionPattern 为 PatternLayout 的选项,用来指定日志输出格式
#%d：输出日志时间点的日期或时间，默认格式为ISO8601，也可以在其后指定格式，如：%d{yyyy/MM/dd HH:mm:ss,SSS}
#%p：输出日志信息的优先级，即DEBUG，INFO，WARN，ERROR，FATAL
#%t：输出产生该日志事件的线程名
#%l：输出日志事件的发生位置，相当于%c.%M(%F:%L)的组合，包括类全名、方法、文件名以及在代码中的行数。例如：test.TestLog4j.main(TestLog4j.java:10)
#%m:：输出代码中指定的具体日志信息
#%x：输出和当前线程相关联的NDC(嵌套诊断环境)，尤其用到像java servlets这样的多客户多线程的应用中
#%n：输出一个回车换行符，Windows平台为"rn"，Unix平台为"n"
log4j.appender.console.layout.ConversionPattern=%d{yyyy/MM/dd HH:mm:ss,SSS} [%-5p] --- [%t] %l: %m %x %n




## daily Appender
## 定期滚动保存日志到文件：每天把当天的日志保存到文件中
log4j.appender.dailyFile=org.apache.log4j.DailyRollingFileAppender
log4j.appender.dailyFile.Threshold=DEBUG
# log4j.appender.rollingFile.Append 设置为true 日志采用追加的方式保存
log4j.appender.dailyFile.Append=true
log4j.appender.dailyFile.File=${logdir}/dailyLogs.log
log4j.appender.dailyFile.DatePattern='-'yyyy-MM-dd
log4j.appender.dailyFile.layout=org.apache.log4j.PatternLayout
log4j.appender.dailyFile.layout.ConversionPattern=%d{yyyy/MM/dd HH:mm:ss,SSS} [%-5p] -->[%t] %l: %m %x %n




## rolling Appender
## 定量保存日志到文件中: 设置日志文件的大小上限,当日志文件大小超过上限时,将日志保存到新的文件中


